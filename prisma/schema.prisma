// Initial Setup

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

// Types

type TDimensions {
    width  Int
    height Int
}

type TImage {
    id          String
    name        String
    dimensions  TDimensions
    isSpoiler   Boolean
    description String?
}

type TNotification {
    type      ENotificationType
    senderId  String
    channelId String?
    content   String?
    count     Int               @default(1)
    createdAt DateTime          @default(now()) @db.Date
}

type TButton {
    text  String
    color String  @default("blue")
    url   String?
}

type TWelcomeScreen {
    title         String
    subtitle      String
    content       String[]
    links         String[]
    buttons       TButton[]
    primaryColor  String?
    accentColor   String?
    backgroundUrl String?
}

type TInvite {
    code      String
    uses      Int
    maxUses   Int
    expiresAt DateTime
    createdAt DateTime @default(now()) @db.Date
}

type TEmbed {
    author      TEmbedAuthor?
    title       String?
    url         String?
    thumbnail   String?
    description String
    fields      TEmbedField[]
    footer      TEmbedFooter?
    color       String?
    timestamp   DateTime?
}

type TEmbedAuthor {
    name    String
    url     String?
    iconUrl String?
}

type TEmbedField {
    name   String
    value  String
    inline Boolean @default(false)
}

type TEmbedFooter {
    text    String
    iconUrl String?
}

type TReaction {
    count Int

    messageId String   @db.ObjectId
    emoteId   String   @db.ObjectId
    userIds   String[] @db.ObjectId

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @db.Date
}

// Enums

enum EUserStatus {
    ONLINE
    IDLE
    DO_NOT_DISTURB
    INVISIBLE
    OFFLINE
}

enum EChannel {
    DM
    GROUP_DM
    GUILD_TEXT
    GUILD_VOICE
    GUILD_CATEGORY
    FORUM
}

enum ETMessage {
    DEFAULT
    REPLY
    RECIPIENT_ADD
    RECIPIENT_REMOVE
    CALL
    CHANNEL_NAME_CHANGE
    CHANNEL_ICON_CHANGE
    CHANNEL_PINNED_MESSAGE
    GUILD_MEMBER_JOIN
    OWNER_CHANGE
}

enum ENotificationType {
    REQUEST
    MESSAGE
    MENTION
    CALL
    SYSTEM
}

// Models

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    username      String          @unique
    displayName   String
    email         String?
    avatar        String
    banner        String?
    primaryColor  String
    accentColor   String
    description   String?
    customStatus  String?
    password      String
    refreshToken  String?
    status        EUserStatus     @default(OFFLINE)
    system        Boolean         @default(false)
    verified      Boolean         @default(false)
    notifications TNotification[]

    guildIds String[] @db.ObjectId
    guilds   Guild[]  @relation("UserGuild", fields: [guildIds], references: [id])

    ownedGuildIds String[] @db.ObjectId
    ownedGuilds   Guild[]  @relation("Owner")

    channelIds String[]  @db.ObjectId
    channels   Channel[] @relation("UserChannel", fields: [channelIds], references: [id])

    hiddenChannelIds String[] @db.ObjectId

    ownedChannelIds String[]  @db.ObjectId
    ownedChannels   Channel[] @relation("Owner")

    ownedRoleIds String[] @db.ObjectId
    ownedRoles   Role[]   @relation("UserRole", fields: [ownedRoleIds], references: [id])

    messages Message[]

    mentionIds String[]  @db.ObjectId
    mentions   Message[] @relation("MessageMention", fields: [mentionIds], references: [id])

    friendIds String[] @db.ObjectId
    friends   User[]   @relation("Friend", fields: [friendIds], references: [id])

    friendOfIds String[] @db.ObjectId
    friendOf    User[]   @relation("Friend", fields: [friendOfIds], references: [id])

    requestReceivedIds String[] @db.ObjectId
    requestsReceived   User[]   @relation("Request", fields: [requestReceivedIds], references: [id])

    requestSentIds String[] @db.ObjectId
    requestsSent   User[]   @relation("Request", fields: [requestSentIds], references: [id])

    blockedUserIds String[] @db.ObjectId
    blockedUsers   User[]   @relation("Blocked", fields: [blockedUserIds], references: [id])

    blockedByUserIds String[] @db.ObjectId
    blockedByUsers   User[]   @relation("Blocked", fields: [blockedByUserIds], references: [id])

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Guild {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    icon          String
    banner        String?
    description   String?
    welcomeScreen TWelcomeScreen?
    vanityUrl     String?
    vanityUrlUses Int?
    invites       TInvite[]
    afkChannelId  String?
    afkTimeout    Int?

    ownerId String @db.ObjectId
    owner   User   @relation("Owner", fields: [ownerId], references: [id])

    memberIds String[] @db.ObjectId
    members   User[]   @relation("UserGuild", fields: [memberIds], references: [id])

    channelIds String[]  @db.ObjectId
    channels   Channel[] @relation("GuildChannel")

    roles Role[]

    emoteIds String[] @db.ObjectId
    emotes   Emote[]  @relation("GuildEmote")

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Role {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    color       String
    permissions String[]
    position    Int
    mentionable Boolean

    guildId String @db.ObjectId
    guild   Guild  @relation(fields: [guildId], references: [id])

    memberIds String[] @db.ObjectId
    members   User[]   @relation("UserRole", fields: [memberIds], references: [id])

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Channel {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    type        EChannel
    name        String?
    description String?
    icon        String?
    nsfw        Boolean  @default(false)
    position    Int?
    parentId    String?
    children    Int      @default(0)
    rateLimit   Int?
    permissions String[]

    guildId String? @db.ObjectId
    guild   Guild?  @relation("GuildChannel", fields: [guildId], references: [id])

    ownerId String? @db.ObjectId
    owner   User?   @relation("Owner", fields: [ownerId], references: [id])

    recipientIds String[] @db.ObjectId
    recipients   User[]   @relation("UserChannel", fields: [recipientIds], references: [id])

    messageIds String[]  @db.ObjectId
    messages   Message[] @relation("ChannelMessage", fields: [messageIds], references: [id])

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Message {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    type              ETMessage
    content           String?
    attachments       TImage[]
    embeds            TEmbed[]
    edited            Boolean     @default(false)
    pinned            DateTime?
    reactions         TReaction[]
    mentionEveryone   Boolean     @default(false)
    mentionChannelIds String[]
    mentionRoleIds    String[]

    mentionIds String[] @db.ObjectId
    mentions   User[]   @relation("MessageMention", fields: [mentionIds], references: [id])

    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id])

    channelId String[]  @db.ObjectId
    channel   Channel[] @relation("ChannelMessage", fields: [channelId], references: [id])

    messageReferenceId String?  @db.ObjectId
    messageReference   Message? @relation("MessageReference", fields: [messageReferenceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    referencedBy Message[] @relation("MessageReference")

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Emote {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    url      String
    animated Boolean @default(false)

    guildId String @db.ObjectId
    guild   Guild  @relation("GuildEmote", fields: [guildId], references: [id])

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}
