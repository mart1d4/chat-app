// Initial Setup
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

// Types
type TMember {
    userId String @db.ObjectId

    nickname String?
    avatar   String?

    roleIds String[] @db.ObjectId

    joinedAt DateTime @default(now()) @db.Date

    deaf         Boolean   @default(false)
    mute         Boolean   @default(false)
    timeoutUntil DateTime?

    permissions Int[]
}

type TDimensions {
    width  Int
    height Int
}

type TAttachment {
    id          String
    url         String
    name        String
    dimensions  TDimensions
    size        Int
    isSpoiler   Boolean
    isImage     Boolean
    description String?
}

type TNotification {
    type      ENotificationType
    senderId  String
    channelId String?
    content   String?
    count     Int               @default(1)
    createdAt DateTime          @default(now()) @db.Date
}

type TButton {
    text  String
    color String  @default("blue")
    url   String?
}

type TWelcomeScreen {
    title         String
    subtitle      String
    content       String[]
    links         String[]
    buttons       TButton[]
    primaryColor  String?
    accentColor   String?
    backgroundUrl String?
}

type TEmbed {
    author      TEmbedAuthor?
    title       String?
    url         String?
    thumbnail   String?
    description String
    fields      TEmbedField[]
    footer      TEmbedFooter?
    color       String?
    timestamp   DateTime?
}

type TEmbedAuthor {
    name    String
    url     String?
    iconUrl String?
}

type TEmbedField {
    name   String
    value  String
    inline Boolean @default(false)
}

type TEmbedFooter {
    text    String
    iconUrl String?
}

type TReaction {
    count Int

    messageId String   @db.ObjectId
    emoteId   String   @db.ObjectId
    userIds   String[] @db.ObjectId

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @db.Date
}

type TPermissionOverwrite {
    id    String   @db.ObjectId
    type  Int
    allow String[]
    deny  String[]
}

type TNote {
    userId String @db.ObjectId
    note   String
}

// Enums

enum EUserStatus {
    ONLINE
    IDLE
    DO_NOT_DISTURB
    INVISIBLE
    OFFLINE
}

enum ENotificationType {
    REQUEST
    MESSAGE
    MENTION
    CALL
    SYSTEM
}

// Models

model User {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    username    String  @unique
    displayName String
    email       String?

    avatar       String
    banner       String?
    primaryColor String
    accentColor  String

    description  String?
    customStatus String?

    password      String
    refreshTokens String[]

    status   EUserStatus @default(OFFLINE)
    system   Boolean     @default(false)
    verified Boolean     @default(false)

    notes TNote[]

    notifications TNotification[]

    guildIds String[] @db.ObjectId
    guilds   Guild[]  @relation("UserGuild", fields: [guildIds], references: [id])

    channelIds String[]  @db.ObjectId
    channels   Channel[] @relation("UserChannel", fields: [channelIds], references: [id])

    hiddenChannelIds String[]  @db.ObjectId
    messages         Message[]

    mentionIds String[]  @db.ObjectId
    mentions   Message[] @relation("MessageMention", fields: [mentionIds], references: [id])

    friendIds String[] @db.ObjectId
    friends   User[]   @relation("Friend", fields: [friendIds], references: [id])

    friendOfIds String[] @db.ObjectId
    friendOf    User[]   @relation("Friend", fields: [friendOfIds], references: [id])

    requestReceivedIds String[] @db.ObjectId
    requestsReceived   User[]   @relation("Request", fields: [requestReceivedIds], references: [id])

    requestSentIds String[] @db.ObjectId
    requestsSent   User[]   @relation("Request", fields: [requestSentIds], references: [id])

    blockedUserIds String[] @db.ObjectId
    blockedUsers   User[]   @relation("Blocked", fields: [blockedUserIds], references: [id])

    blockedByUserIds String[] @db.ObjectId
    blockedByUsers   User[]   @relation("Blocked", fields: [blockedByUserIds], references: [id])

    // That's so dumb that you have to do that
    inviteSentIds String[] @db.ObjectId
    invitesSent   Invite[] @relation("InviteSent")

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Guild {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    icon        String?
    banner      String?
    description String?

    welcomeScreen TWelcomeScreen?
    vanityUrl     String?
    vanityUrlUses Int?
    inviteIds     String[]        @db.ObjectId
    invites       Invite[]        @relation("GuildInvite")

    systemChannelId String? @db.ObjectId
    afkChannelId    String? @db.ObjectId
    afkTimeout      Int?

    ownerId String @db.ObjectId

    rawMemberIds String[] @db.ObjectId
    rawMembers   User[]   @relation("UserGuild", fields: [rawMemberIds], references: [id])

    members  TMember[]
    channels Channel[] @relation("GuildChannel")
    roles    Role[]    @relation("UserRole")
    emotes   Emote[]   @relation("GuildEmote")

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Role {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    color       String?
    hoist       Boolean
    icon        String?
    position    Int
    permissions Int[]
    mentionable Boolean

    guildId String @db.ObjectId
    guild   Guild  @relation("UserRole", fields: [guildId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Invite {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    code      String
    uses      Int     @default(0)
    maxUses   Int
    maxAge    Int
    temporary Boolean

    inviterId String @db.ObjectId
    inviter   User   @relation("InviteSent", fields: [inviterId], references: [id])

    guildId String? @db.ObjectId
    guild   Guild?  @relation("GuildInvite", fields: [guildId], references: [id], onDelete: Cascade)

    channelId String  @db.ObjectId
    channel   Channel @relation("ChannelInvite", fields: [channelId], references: [id], onDelete: Cascade)

    expiresAt DateTime?
    createdAt DateTime  @default(now()) @db.Date
}

model Channel {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    type  Int
    name  String?
    topic String?
    icon  String?

    nsfw     Boolean?
    position Int?
    parentId String?

    lastMessageId    String?   @db.ObjectId
    lastPinTimestamp DateTime?

    rateLimit Int?
    userLimit Int?
    bitrate   Int?

    rtcRegion        String?
    videoQualityMode String?

    ownerId String? @db.ObjectId

    guildId String? @db.ObjectId
    guild   Guild?  @relation("GuildChannel", fields: [guildId], references: [id], onDelete: Cascade)

    recipientIds String[] @db.ObjectId
    recipients   User[]   @relation("UserChannel", fields: [recipientIds], references: [id])

    inviteIds String[] @db.ObjectId
    invites   Invite[] @relation("ChannelInvite")

    messages Message[] @relation("ChannelMessage")

    permissionOverwrites TPermissionOverwrite[]

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Message {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    type        Int
    content     String?
    attachments TAttachment[]
    embeds      TEmbed[]

    edited Boolean   @default(false)
    pinned DateTime?

    reactions         TReaction[]
    mentionEveryone   Boolean     @default(false)
    mentionChannelIds String[]
    mentionRoleIds    String[]

    mentionIds String[] @db.ObjectId
    mentions   User[]   @relation("MessageMention", fields: [mentionIds], references: [id])

    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id])

    channelId String  @db.ObjectId
    channel   Channel @relation("ChannelMessage", fields: [channelId], references: [id], onDelete: Cascade)

    messageReferenceId String?  @db.ObjectId
    messageReference   Message? @relation("MessageReference", fields: [messageReferenceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    referencedBy Message[] @relation("MessageReference")

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}

model Emote {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    url      String
    animated Boolean @default(false)

    guildId String @db.ObjectId
    guild   Guild  @relation("GuildEmote", fields: [guildId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now()) @db.Date
    updatedAt DateTime @default(now()) @updatedAt @db.Date
    v         Int      @default(0) @map("__v") @ignore
}
